from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
from aiogram.filters import Command
import config
import os
import re

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()
router = Router()

# –°—á—ë—Ç—á–∏–∫–∏
complaint_counter = 1
collaboration_counter = 1

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¢ –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã")],
        [KeyboardButton(text="ü§ù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ")],
        [KeyboardButton(text="üìÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å")],
        [KeyboardButton(text="‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –¢–ü –∏ –†–£")],
        [KeyboardButton(text="üÜï –ù–æ–≤–æ—Å—Ç–∏")],
        [KeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç
order_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", url="http://zakaz.krymhleb.ru/login")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
cancel_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

confirm_cancel_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚Ü©Ô∏è –ù–µ—Ç")]],
    resize_keyboard=True
)

payment_form_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç")],
        [KeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

user_data = {}
admin_broadcast_text = {}
# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = str(message.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Ñ–∞–π–ª users.txt
    if not os.path.exists("users.txt"):
        with open("users.txt", "w") as f:
            f.write(user_id + "\n")
    else:
        with open("users.txt", "r") as f:
            users = f.read().splitlines()
        if user_id not in users:
            with open("users.txt", "a") as f:
                f.write(user_id + "\n")

    user_data.pop(message.from_user.id, None)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–û '–ö—Ä—ã–º–•–ª–µ–±'!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞
@router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message):
    user_data.pop(message.from_user.id, None)
    await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ –∑–∞–∫–∞–∑–∞
@router.message(lambda message: message.text == "üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def open_order_site(message: types.Message):
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:",
        reply_markup=order_button
    )

# ---------------- –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã ----------------

@router.message(lambda message: message.text == "üì¢ –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã")
async def complaint_start(message: types.Message):
    user_data[message.from_user.id] = {"step": "complaint_ip"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ò–ü –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "complaint_ip")
async def complaint_ip(message: types.Message):
    user_data[message.from_user.id]["ip_name"] = message.text
    user_data[message.from_user.id]["step"] = "complaint_datetime"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "complaint_datetime")
async def complaint_datetime(message: types.Message):
    user_data[message.from_user.id]["datetime"] = message.text
    user_data[message.from_user.id]["step"] = "complaint_text"
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –∂–∞–ª–æ–±—ã:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "complaint_text")
async def complaint_text(message: types.Message):
    user_data[message.from_user.id]["description"] = message.text
    user_data[message.from_user.id]["step"] = "complaint_photo_question"
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∂–∞–ª–æ–±–µ?", reply_markup=confirm_cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "complaint_photo_question")
async def complaint_photo_question(message: types.Message):
    if message.text == "‚úÖ –î–∞":
        user_data[message.from_user.id]["step"] = "complaint_photo_upload"
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:", reply_markup=cancel_menu)
    else:
        await send_complaint(message)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "complaint_photo_upload")
async def complaint_photo_upload(message: types.Message):
    if message.photo:
        user_data[message.from_user.id]["photo"] = message.photo[-1].file_id
    await send_complaint(message)

async def send_complaint(message: types.Message):
    global complaint_counter
    data = user_data.pop(message.from_user.id, {})
    text = (
        f"‚ÄºÔ∏è –ñ–∞–ª–æ–±–∞ ‚Ññ{complaint_counter}\n\n"
        f"–ò–ü/–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {data.get('ip_name')}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data.get('datetime')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}"
    )
    if "photo" in data:
        await bot.send_photo(config.REPORT_CHAT_ID, data["photo"], caption=text)
    else:
        await bot.send_message(config.REPORT_CHAT_ID, text)

    complaint_counter += 1
    await message.answer("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.", reply_markup=main_menu)
# ---------------- –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ ----------------

@router.message(lambda message: message.text == "ü§ù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ")
async def collaboration_start(message: types.Message):
    user_data[message.from_user.id] = {"step": "choose_payment"}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_form_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "choose_payment")
async def choose_payment(message: types.Message):
    if message.text == "üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç":
        user_data[message.from_user.id]["payment_type"] = "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
        user_data[message.from_user.id]["step"] = "partner_card"
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:", reply_markup=cancel_menu)
    elif message.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç":
        user_data[message.from_user.id]["payment_type"] = "–ù–∞–ª–∏—á–Ω—ã–π"
        user_data[message.from_user.id]["step"] = "contract_name"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ò–ü –∏–ª–∏ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "partner_card")
async def partner_card(message: types.Message):
    if message.photo:
        user_data[message.from_user.id]["partner_card_photo"] = message.photo[-1].file_id
        user_data[message.from_user.id]["step"] = "tax_certificate"
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω –≤—ã–ø–∏—Å–∫–∏ –∏–∑ –Ω–∞–ª–æ–≥–æ–≤–æ–π:", reply_markup=cancel_menu)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "tax_certificate")
async def tax_certificate(message: types.Message):
    if message.photo:
        user_data[message.from_user.id]["tax_certificate_photo"] = message.photo[-1].file_id
        user_data[message.from_user.id]["step"] = "tax_system"
        await message.answer("–ù–∞ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à –º–∞–≥–∞–∑–∏–Ω?", reply_markup=cancel_menu)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "tax_system")
async def tax_system(message: types.Message):
    user_data[message.from_user.id]["tax_system"] = message.text
    user_data[message.from_user.id]["step"] = "contract_name"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ò–ü –∏–ª–∏ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "contract_name")
async def contract_name(message: types.Message):
    user_data[message.from_user.id]["contract_name"] = message.text
    user_data[message.from_user.id]["step"] = "address"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "address")
async def address(message: types.Message):
    user_data[message.from_user.id]["address"] = message.text
    user_data[message.from_user.id]["step"] = "work_time"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "work_time")
async def work_time(message: types.Message):
    user_data[message.from_user.id]["work_time"] = message.text
    user_data[message.from_user.id]["step"] = "contact_person"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§.–ò.–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "contact_person")
async def contact_person(message: types.Message):
    user_data[message.from_user.id]["contact_person"] = message.text
    user_data[message.from_user.id]["step"] = "phone_number"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã +, -, —Å–∫–æ–±–∫–∏):", reply_markup=cancel_menu)
@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "phone_number")
async def phone_number(message: types.Message):
    global collaboration_counter
    if not re.fullmatch(r"[\d\-\+\(\)\s]+", message.text):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, +, -, –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∫–æ–±–∫–∏)", reply_markup=cancel_menu)
        return

    data = user_data.pop(message.from_user.id, {})
    text = (
        f"üì¢ –ó–∞—è–≤–∫–∞ ‚Ññ{collaboration_counter}\n\n"
        f"–ò–ü/–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {data.get('contract_name')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {data.get('work_time')}\n"
        f"–§.–ò.–û: {data.get('contact_person')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {message.text}\n"
        f"–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: {data.get('payment_type')}\n"
        f"–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è: {data.get('tax_system', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )

    if "partner_card_photo" in data:
        await bot.send_photo(config.REPORT_CHAT_ID, data["partner_card_photo"], caption="–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
    if "tax_certificate_photo" in data:
        await bot.send_photo(config.REPORT_CHAT_ID, data["tax_certificate_photo"], caption="–í—ã–ø–∏—Å–∫–∞ –∏–∑ –Ω–∞–ª–æ–≥–æ–≤–æ–π")

    await bot.send_message(config.REPORT_CHAT_ID, text)
    collaboration_counter += 1
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", reply_markup=main_menu)

# ---------------- –ü—Ä–∞–π—Å ----------------

@router.message(lambda message: message.text == "üìÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å")
async def request_price(message: types.Message):
    user_data[message.from_user.id] = {"step": "request_price_ip"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ò–ü –∏–ª–∏ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:", reply_markup=cancel_menu)

@router.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "request_price_ip")
async def send_price(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_data.pop(message.from_user.id, None)
        await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return

    ip_name = message.text
    try:
        price = FSInputFile(config.PRICE_FILE)
        await message.answer_document(price, caption="üìÑ –í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å.", reply_markup=main_menu)
        await bot.send_message(config.REPORT_CHAT_ID, f"üìÑ –ü—Ä–∞–π—Å –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω.\n–ò–ü/–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {ip_name}")
    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∞–π—Å–∞: {e}")
    finally:
        user_data.pop(message.from_user.id, None)

# ---------------- –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ ----------------

@router.message(lambda message: message.text == "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –¢–ü –∏ –†–£")
async def show_contacts(message: types.Message):
    await message.answer(
        f"üë®‚Äçüíº –¢–ü: {config.MANAGER_NAME}\n–¢–µ–ª–µ—Ñ–æ–Ω: {config.MANAGER_PHONE}\n\n"
        f"üëî –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π: {config.REGIONAL_MANAGER_NAME}\n–¢–µ–ª–µ—Ñ–æ–Ω: {config.REGIONAL_MANAGER_PHONE}",
        reply_markup=main_menu
    )

@router.message(lambda message: message.text == "üÜï –ù–æ–≤–æ—Å—Ç–∏")
async def show_news(message: types.Message):
    await message.answer(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏:\n\n{config.NEWS_TEXT}", reply_markup=main_menu)

# ---------------- –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ----------------

ADMIN_ID = config.ADMIN_ID

@router.message(Command("admin"))
async def admin_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    admin_broadcast_text[message.from_user.id] = "waiting_for_text"

@router.message(lambda message: admin_broadcast_text.get(message.from_user.id) == "waiting_for_text")
async def admin_broadcast(message: types.Message):
    text = message.text
    admin_broadcast_text.pop(message.from_user.id)

    if not os.path.exists("users.txt"):
        await message.answer("–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open("users.txt", "r") as f:
        users = f.read().splitlines()

    sent_count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
        except Exception:
            continue

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# ---------------- –ó–∞–ø—É—Å–∫ ----------------

dp.include_router(router)

if __name__ == "__main__":
    dp.run_polling(bot)
